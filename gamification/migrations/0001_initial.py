# Generated by Django 5.1.7 on 2025-03-11 16:48

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('icon', models.ImageField(upload_to='gamification/badges/', verbose_name='Icon')),
                ('category', models.CharField(max_length=50, verbose_name='Category')),
                ('points_value', models.PositiveIntegerField(default=0, verbose_name='Points value')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is hidden')),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(unique=True, verbose_name='Level number')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('points_required', models.PositiveIntegerField(verbose_name='Points required')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='gamification/levels/', verbose_name='Icon')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Level',
                'verbose_name_plural': 'Levels',
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('icon', models.ImageField(upload_to='gamification/achievements/', verbose_name='Icon')),
                ('points_reward', models.PositiveIntegerField(default=0, verbose_name='Points reward')),
                ('is_hidden', models.BooleanField(default=False, verbose_name='Is hidden')),
                ('criteria', models.JSONField(default=dict, verbose_name='Criteria')),
                ('badge_reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='achievements', to='gamification.badge', verbose_name='Badge reward')),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('expert', 'Expert')], default='medium', max_length=10, verbose_name='Difficulty')),
                ('points_reward', models.PositiveIntegerField(default=0, verbose_name='Points reward')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Start date')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('scheduled', 'Scheduled'), ('completed', 'Completed')], default='active', max_length=10, verbose_name='Status')),
                ('completion_criteria', models.JSONField(default=dict, verbose_name='Completion criteria')),
                ('max_completions', models.PositiveIntegerField(default=1, verbose_name='Maximum completions')),
                ('badge_reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='challenges', to='gamification.badge', verbose_name='Badge reward')),
            ],
            options={
                'verbose_name': 'Challenge',
                'verbose_name_plural': 'Challenges',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('category', models.CharField(max_length=50, verbose_name='Category')),
                ('period', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly'), ('all_time', 'All Time')], default='weekly', max_length=10, verbose_name='Period')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Start date')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
            ],
            options={
                'verbose_name': 'Leaderboard',
                'verbose_name_plural': 'Leaderboards',
                'ordering': ['-start_date'],
                'indexes': [models.Index(fields=['category', 'period'], name='gamificatio_categor_0d838a_idx'), models.Index(fields=['is_active'], name='gamificatio_is_acti_9ce823_idx'), models.Index(fields=['start_date', 'end_date'], name='gamificatio_start_d_5e9485_idx')],
                'unique_together': {('category', 'period', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0, verbose_name='Score')),
                ('rank', models.PositiveIntegerField(blank=True, null=True, verbose_name='Rank')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='gamification.leaderboard', verbose_name='Leaderboard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Leaderboard Entry',
                'verbose_name_plural': 'Leaderboard Entries',
                'ordering': ['-score'],
            },
        ),
        migrations.CreateModel(
            name='LevelUpEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('from_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='level_ups_from', to='gamification.level', verbose_name='From level')),
                ('to_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='level_ups_to', to='gamification.level', verbose_name='To level')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='level_ups', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Level Up Event',
                'verbose_name_plural': 'Level Up Events',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Amount')),
                ('source', models.CharField(max_length=100, verbose_name='Source')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_records', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Point',
                'verbose_name_plural': 'Points',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='gamification/rewards/', verbose_name='Image')),
                ('points_cost', models.PositiveIntegerField(verbose_name='Points cost')),
                ('quantity_available', models.IntegerField(default=-1, verbose_name='Quantity available')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Start date')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End date')),
                ('redemption_instructions', models.TextField(blank=True, verbose_name='Redemption instructions')),
            ],
            options={
                'verbose_name': 'Reward',
                'verbose_name_plural': 'Rewards',
                'ordering': ['points_cost', 'name'],
                'indexes': [models.Index(fields=['is_active'], name='gamificatio_is_acti_fabda9_idx'), models.Index(fields=['points_cost'], name='gamificatio_points__69d709_idx'), models.Index(fields=['start_date', 'end_date'], name='gamificatio_start_d_c9e9c3_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True, verbose_name='Unlocked at')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='gamification.achievement', verbose_name='Achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Achievement',
                'verbose_name_plural': 'User Achievements',
                'ordering': ['-unlocked_at'],
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True, verbose_name='Earned at')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='gamification.badge', verbose_name='Badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Badge',
                'verbose_name_plural': 'User Badges',
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='UserChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('abandoned', 'Abandoned')], default='in_progress', max_length=15, verbose_name='Status')),
                ('progress', models.JSONField(default=dict, verbose_name='Progress')),
                ('progress_percentage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Progress percentage')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Started at')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed at')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='gamification.challenge', verbose_name='Challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Challenge',
                'verbose_name_plural': 'User Challenges',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='UserLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.PositiveIntegerField(default=0, verbose_name='Total points')),
                ('points_to_next_level', models.PositiveIntegerField(default=0, verbose_name='Points to next level')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='gamification.level', verbose_name='Level')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='level', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Level',
                'verbose_name_plural': 'User Levels',
            },
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_spent', models.PositiveIntegerField(verbose_name='Points spent')),
                ('redeemed_at', models.DateTimeField(auto_now_add=True, verbose_name='Redeemed at')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('fulfilled', 'Fulfilled'), ('cancelled', 'Cancelled')], default='pending', max_length=15, verbose_name='Status')),
                ('fulfillment_details', models.JSONField(blank=True, default=dict, verbose_name='Fulfillment details')),
                ('code', models.CharField(default=uuid.uuid4, max_length=50, unique=True, verbose_name='Redemption code')),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redemptions', to='gamification.reward', verbose_name='Reward')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Reward',
                'verbose_name_plural': 'User Rewards',
                'ordering': ['-redeemed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='challenge',
            index=models.Index(fields=['status'], name='gamificatio_status_bcc19c_idx'),
        ),
        migrations.AddIndex(
            model_name='challenge',
            index=models.Index(fields=['difficulty'], name='gamificatio_difficu_6d2201_idx'),
        ),
        migrations.AddIndex(
            model_name='challenge',
            index=models.Index(fields=['start_date', 'end_date'], name='gamificatio_start_d_ff8bb0_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboardentry',
            index=models.Index(fields=['leaderboard', 'score'], name='gamificatio_leaderb_b7b870_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboardentry',
            index=models.Index(fields=['user'], name='gamificatio_user_id_fd23b8_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboardentry',
            index=models.Index(fields=['rank'], name='gamificatio_rank_204e4a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='leaderboardentry',
            unique_together={('leaderboard', 'user')},
        ),
        migrations.AddIndex(
            model_name='levelupevent',
            index=models.Index(fields=['user', 'created_at'], name='gamificatio_user_id_c8680a_idx'),
        ),
        migrations.AddIndex(
            model_name='point',
            index=models.Index(fields=['user', 'created_at'], name='gamificatio_user_id_59f015_idx'),
        ),
        migrations.AddIndex(
            model_name='point',
            index=models.Index(fields=['source'], name='gamificatio_source_3dc08c_idx'),
        ),
        migrations.AddIndex(
            model_name='userachievement',
            index=models.Index(fields=['user', 'unlocked_at'], name='gamificatio_user_id_692b16_idx'),
        ),
        migrations.AddIndex(
            model_name='userachievement',
            index=models.Index(fields=['achievement'], name='gamificatio_achieve_e7ca42_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userachievement',
            unique_together={('user', 'achievement')},
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['user', 'earned_at'], name='gamificatio_user_id_683edb_idx'),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['badge'], name='gamificatio_badge_i_20a089_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userbadge',
            unique_together={('user', 'badge')},
        ),
        migrations.AddIndex(
            model_name='userchallenge',
            index=models.Index(fields=['user', 'status'], name='gamificatio_user_id_e8845f_idx'),
        ),
        migrations.AddIndex(
            model_name='userchallenge',
            index=models.Index(fields=['challenge'], name='gamificatio_challen_84ece0_idx'),
        ),
        migrations.AddIndex(
            model_name='userchallenge',
            index=models.Index(fields=['completed_at'], name='gamificatio_complet_ef61fc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userchallenge',
            unique_together={('user', 'challenge')},
        ),
        migrations.AddIndex(
            model_name='userlevel',
            index=models.Index(fields=['user'], name='gamificatio_user_id_f8d638_idx'),
        ),
        migrations.AddIndex(
            model_name='userlevel',
            index=models.Index(fields=['level'], name='gamificatio_level_i_d15aa4_idx'),
        ),
        migrations.AddIndex(
            model_name='userlevel',
            index=models.Index(fields=['total_points'], name='gamificatio_total_p_29a783_idx'),
        ),
        migrations.AddIndex(
            model_name='userreward',
            index=models.Index(fields=['user', 'status'], name='gamificatio_user_id_ce04e7_idx'),
        ),
        migrations.AddIndex(
            model_name='userreward',
            index=models.Index(fields=['reward'], name='gamificatio_reward__9509ff_idx'),
        ),
        migrations.AddIndex(
            model_name='userreward',
            index=models.Index(fields=['redeemed_at'], name='gamificatio_redeeme_591eb2_idx'),
        ),
        migrations.AddIndex(
            model_name='userreward',
            index=models.Index(fields=['code'], name='gamificatio_code_7fe264_idx'),
        ),
    ]
